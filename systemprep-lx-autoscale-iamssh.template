{
    "AWSTemplateFormatVersion" : "2010-09-09",
    "Description" : "This template creates an Autoscaling Group and Launch Configuration that deploy Linux instances with the SystemPrep bootstrapper, which applies the DISA STIG.",
    "Parameters" :
    {
        "AmiId" :
        {
            "Description" : "ID of the AMI to launch",
            "Type" : "String",
            "AllowedPattern" : "^ami-[0-9a-z]{8}$|^ami-[0-9a-z]{17}$"
        },
        "AmiDistro" :
        {
            "Description" : "Linux distro of the AMI",
            "Type" : "String",
            "AllowedValues" :
            [
                "AmazonLinux",
                "CentOS",
                "RedHat"
            ]
        },
        "AppScriptParams" :
        {
            "Description" : "Parameter string to pass to the application script. This parameter is ignored unless \"AppScriptUrl\" is provided",
            "Type" : "String"
        },
        "AppScriptShell" :
        {
            "Description" : "Shell with which to execute the application script. This parameter is ignored unless \"AppScriptUrl\" is provided",
            "Type" : "String",
            "Default" : "bash",
            "AllowedValues" :
            [
                "bash",
                "python"
            ]
        },
        "AppScriptUrl" :
        {
            "Description" : "URL to the application script. Leave blank to launch without an application script",
            "Type" : "String",
            "Default" : "",
            "AllowedPattern" : "^$|^http://.*$|^https://.*$"
        },
        "KeyPairName" :
        {
            "Description" : "Public/private key pairs allow you to securely connect to your instance after it launches",
            "Type" : "AWS::EC2::KeyPair::KeyName"
        },
        "IAMGroup" : 
        {
            "Description" : "ID of the IAM group to be granted SSH access to instance",
            "Type" : "String"
        },
        "InstanceType" :
        {
            "Description" : "Amazon EC2 instance type",
            "Type" : "String",
            "Default" : "t2.micro",
            "AllowedValues" :
            [
                "t2.micro",
                "t2.small",
                "t2.medium",
                "t2.large",
                "c4.large",
                "c4.xlarge",
                "m4.large",
                "m4.xlarge"
            ]
        },
        "MinSize" :
        {
            "Description" : "Minimum number of instances in the Autoscaling Group",
            "Type" : "Number",
            "Default" : "1"
        },
        "MaxSize" :
        {
            "Description" : "Maximum number of instances in the Autoscaling Group",
            "Type" : "Number",
            "Default" : "2"
        },
        "DesiredCapacity" :
        {
            "Description" : "Desired number of instances in the Autoscaling Group",
            "Type" : "Number",
            "Default" : "1"
        },
        "NoPublicIp" :
        {
            "Description" : "Controls whether to assign the instance a public IP. Recommended to leave at \"true\" _unless_ launching in a public subnet",
            "Type" : "String",
            "Default" : "true",
            "AllowedValues" :
            [
                "false",
                "true"
            ]
        },
        "NoReboot" :
        {
            "Description" : "Controls whether to reboot the instance as the last step of cfn-init execution",
            "Type" : "String",
            "Default" : "false",
            "AllowedValues" :
            [
                "false",
                "true"
            ]
        },
        "NoUpdates" :
        {
            "Description" : "Controls whether to run yum update during a stack update (on the initial instance launch, SystemPrep _always_ installs updates)",
            "Type" : "String",
            "Default" : "false",
            "AllowedValues" :
            [
                "false",
                "true"
            ]
        },
        "SecurityGroupIds" :
        {
            "Description" : "List of security groups to apply to the instance(s)",
            "Type" : "List<AWS::EC2::SecurityGroup::Id>"
        },
        "SubnetIds" :
        {
            "Type" : "List<AWS::EC2::Subnet::Id>",
            "Description" : "List of subnets to associate to the Autoscaling Group"
        },
        "SystemPrepBootstrapUrl" :
        {
            "Description" : "URL to the SystemPrep Bootstrapper",
            "Type" : "String",
            "Default" : "https://s3.amazonaws.com/systemprep/BootStrapScripts/SystemPrep-Bootstrap--Linux.sh",
            "AllowedPattern" : "^http://.*\\.sh$|^https://.*\\.sh$"
        },
        "SystemPrepEnvironment" :
        {
            "Description" : "Environment in which the instance is being deployed",
            "Type" : "String",
            "Default" : "false",
            "AllowedValues" :
            [
                "false",
                "dev",
                "test",
                "prod"
            ]
        },
        "SystemPrepOuPath" :
        {
            "Description" : "DN of the OU to place the instance when joining a domain. If blank and \"SystemPrepEnvironment\" enforces a domain join, the instance will be placed in a default container. Leave blank if not joining a domain, or if \"SystemPrepEnvironment\" is \"false\"",
            "Type" : "String",
            "Default" : "",
            "AllowedPattern" : "^$|^(OU=.+,)+(DC=.+)+$"
        },
        "ToggleCfnInitUpdate" :
        {
            "Description" : "A/B toggle that forces a change to instance metadata, triggering the cfn-init update sequence",
            "Type" : "String",
            "Default" : "A",
            "AllowedValues" :
            [
                "A",
                "B"
            ]
        },
        "ToggleNewInstances" :
        {
            "Description" : "A/B toggle that forces a change to instance userdata, triggering new instances via the Autoscale update policy",
            "Type" : "String",
            "Default" : "A",
            "AllowedValues" :
            [
                "A",
                "B"
            ]
        }
    },
    "Conditions" :
    {
        "ExecuteAppScript" :
        {
            "Fn::Not" : [ { "Fn::Equals" : [ { "Ref" : "AppScriptUrl" }, "" ] } ]
        },
        "UseOuPath" :
        {
            "Fn::Not" : [ { "Fn::Equals" : [ { "Ref" : "SystemPrepOuPath" }, "" ] } ]
        },
        "InstallUpdates" :
        {
            "Fn::Not" : [ { "Fn::Equals" : [ { "Ref" : "NoUpdates" }, "true" ] } ]
        },
        "Reboot" :
        {
            "Fn::Not" : [ { "Fn::Equals" : [ { "Ref" : "NoReboot" }, "true" ] } ]
        },
        "AssignPublicIp" :
        {
            "Fn::Not" : [ { "Fn::Equals" : [ { "Ref" : "NoPublicIp" }, "true" ] } ]
        }
    },
    "Mappings" :
    {
        "Distro2RootDevice" :
        {
            "AmazonLinux" : { "DeviceName" : "xvda" },
            "RedHat" : { "DeviceName" : "sda1" },
            "CentOS" : { "DeviceName" : "sda1" }
        }
    },
    "Resources" :
    {
        "InstanceProfile" : 
        {
            "Type" : "AWS::IAM::InstanceProfile",
            "Properties" : {
                "Path" : "/",
                "Roles" : [{"Ref": "InstanceRole"}]
            }
        },
        "InstanceRole": 
        {
            "Type": "AWS::IAM::Role",
            "Properties": {
                "AssumeRolePolicyDocument": {
                    "Version": "2012-10-17",
                    "Statement": [ {
                        "Effect": "Allow",
                        "Principal": {
                            "Service": [ "ec2.amazonaws.com" ]
                        },
                        "Action": [ "sts:AssumeRole" ]
                    } ]
                },
                "Path": "/"
            }
        },
        "InstancePolicyAllowIAMgroupSSHKeyAccess": 
        {
            "Type": "AWS::IAM::Policy",
            "Properties": {
                "PolicyName" : "AllowIAMgroupSSHKeyAccess",
                "PolicyDocument": {
                    "Version": "2012-10-17",
                    "Statement": [ {
                        "Effect": "Allow",
                        "Action": [ "iam:GetGroup" ],
                        "Resource": [
                            { "Fn::Join": [ "", [ "arn:aws:iam::", { "Ref": "AWS::AccountId" }, ":group/", { "Ref": "IAMGroup" } ] ] }
                        ]
                    }, 
                    {
                        "Effect": "Allow",
                        "Action": [
                            "iam:ListSSHPublicKeys",
                            "iam:GetSSHPublicKey"
                        ],
                        "Resource": [
                            { "Fn::Join": [ "", [ "arn:aws:iam::", { "Ref": "AWS::AccountId" }, ":user/*" ] ] }
                        ]
                    } ]
                },
                "Roles": [ { "Ref": "InstanceRole" } ]
            } 
        },
        "SystemPrepAutoScalingGroup" :
        {
            "Type" : "AWS::AutoScaling::AutoScalingGroup",
            "UpdatePolicy" : {
                "AutoScalingRollingUpdate" : {
                    "MinInstancesInService" : "1",
                    "MaxBatchSize" : "2",
                    "WaitOnResourceSignals" : "true",
                    "PauseTime" : "PT30M"
                }
            },
            "CreationPolicy" :
            {
                "ResourceSignal" :
                {
                    "Count" : { "Ref" : "DesiredCapacity" },
                    "Timeout" : "PT30M"
                }
            },
            "Properties" :
            {
                "VPCZoneIdentifier" : { "Ref" : "SubnetIds" },
                "LaunchConfigurationName" : { "Ref" : "SystemPrepLaunchConfig" },
                "MinSize" : { "Ref" : "MinSize" },
                "MaxSize" : { "Ref" : "MaxSize" },
                "DesiredCapacity" : { "Ref" : "DesiredCapacity" },
                "Tags" :
                [
                    {
                        "Key" : "Name",
                        "Value" :
                        { "Fn::Join" : [ "", [
                            { "Ref" : "AWS::StackName" }
                        ] ] },
                        "PropagateAtLaunch" : "true"
                    }
                ]
            }
        },
        "SystemPrepLaunchConfig" :
        {
            "Type" : "AWS::AutoScaling::LaunchConfiguration",
            "Metadata" : {
                "ToggleCfnInitUpdate" : { "Ref" : "ToggleCfnInitUpdate" },
                "AWS::CloudFormation::Init" :
                {
                    "configSets" :
                    {
                        "launch" :
                        [
                            "setup",
                            "systemprep-launch",
                            {
                                "Fn::If" :
                                [
                                    "ExecuteAppScript",
                                    "make-app",
                                    { "Ref" : "AWS::NoValue" }
                                ]
                            },
                            "ec2sshsetup",
                            "finalize",
                            {
                                "Fn::If" :
                                [
                                    "Reboot",
                                    "reboot",
                                    { "Ref" : "AWS::NoValue" }
                                ]
                            }
                        ],
                        "update" :
                        [
                            "setup",
                            {
                                "Fn::If" :
                                [
                                    "InstallUpdates",
                                    "install-updates",
                                    { "Ref" : "AWS::NoValue" }
                                ]
                            },
                            "systemprep-update",
                            {
                                "Fn::If" :
                                [
                                    "ExecuteAppScript",
                                    "make-app",
                                    { "Ref" : "AWS::NoValue" }
                                ]
                            },
                            "ec2sshsetup",
                            "finalize",
                            {
                                "Fn::If" :
                                [
                                    "Reboot",
                                    "reboot",
                                    { "Ref" : "AWS::NoValue" }
                                ]
                            }
                        ]
                    },
                    "setup" :
                    {
                        "files" :
                        {
                            "/etc/cfn/cfn-hup.conf" :
                            {
                                "content" :
                                { "Fn::Join" : ["", [
                                    "[main]\n",
                                    "stack=", { "Ref" : "AWS::StackId" }, "\n",
                                    "region=", { "Ref" : "AWS::Region" }, "\n",
                                    "interval=1", "\n",
                                    "verbose=true", "\n"
                                ]]},
                                "mode"    : "000400",
                                "owner"   : "root",
                                "group"   : "root"
                            },
                            "/etc/cfn/hooks.d/cfn-auto-reloader.conf" :
                            {
                                "content" :
                                { "Fn::Join" : ["", [
                                    "[cfn-auto-reloader-hook]\n",
                                    "triggers=post.update\n",
                                    "path=Resources.SystemPrepLaunchConfig.Metadata\n",
                                    "action=/opt/aws/bin/cfn-init -v -c update",
                                    " --stack ", { "Ref" : "AWS::StackName" },
                                    " --resource SystemPrepLaunchConfig",
                                    " --region ", { "Ref" : "AWS::Region" }, "\n",
                                    "runas=root\n"
                                ]]},
                                "mode" : "000400",
                                "owner" : "root",
                                "group" : "root"
                            },
                            "/etc/cfn/scripts/systemprep-bootstrapper.sh" :
                            {
                                "source" : { "Ref" : "SystemPrepBootstrapUrl" },
                                "mode" : "000700",
                                "owner" : "root",
                                "group" : "root"
                            }
                        },
                        "services" :
                        {
                            "sysvinit" :
                            {
                                "cfn-hup" :
                                {
                                    "enabled" : "true",
                                    "ensureRunning" : "true",
                                    "files" :
                                    [
                                        "/etc/cfn/cfn-hup.conf",
                                        "/etc/cfn/hooks.d/cfn-auto-reloader.conf"
                                    ]
                                }
                            }
                        }
                    },
                    "ec2sshsetup" :
                    {
                        "packages" : 
                        {
                            "yum" : {
                                "git" : []
                            }
                        },
                        "files" : 
                        {
                            "/usr/local/bin/authorized_keys_command.sh": 
                            {
                                "content": 
                                {"Fn::Join": ["", [
                                    "#!/bin/bash -e", "\n",
                                    "if [ -z \"$1\" ]; then", "\n",
                                    "  exit 1", "\n",
                                    "fi", "\n",
                                    "aws iam list-ssh-public-keys --user-name \"$1\" --query \"SSHPublicKeys[?Status == 'Active'].[SSHPublicKeyId]\" --output text | while read KeyId; do", "\n",
                                    "  aws iam get-ssh-public-key --user-name \"$1\" --ssh-public-key-id \"$KeyId\" --encoding SSH --query \"SSHPublicKey.SSHPublicKeyBody\" --output text", "\n",
                                    "done", "\n"
                                ]]},
                                "mode": "000755",
                                "owner": "root",
                                "group": "root"
                            },
                            "/etc/cron.d/usermgmt": 
                            {
                                "content": 
                                {"Fn::Join": ["", [
                                    "*/8 * * * * root /usr/local/bin/usermgmt.sh -G `cat /usr/local/bin/groupname`", "\n"
                                ]]},
                                "mode": "000644",
                                "owner": "root",
                                "group": "root"
                            }
                        },
                        "commands" : 
                        {
                            "10-clonerepo": 
                            {
                                "command" : 
                                {
                                    "Fn::Join" : 
                                    ["",
                                        ["git clone -b usermgmt https://github.com/ewierschke/aws-ec2-ssh /usr/local/bin/aws-ec2-ssh",
                                        "\n"]
                                    ]
                                }
                            },
                            "20-cp_usermgmt": 
                            {
                                "command": "cp /usr/local/bin/aws-ec2-ssh/usermgmt.sh /usr/local/bin/"
                            },
                            "30-ch_usermgmt": 
                            {
                                "command": "chmod 755 /usr/local/bin/usermgmt.sh & chown root /usr/local/bin/usermgmt.sh & chgrp root /usr/local/bin/usermgmt.sh"
                            },
                            "40-configure_sshd_command": 
                            {
                                "command": "sed -i 's:#AuthorizedKeysCommand none:AuthorizedKeysCommand /usr/local/bin/authorized_keys_command.sh:g' /etc/ssh/sshd_config"
                            },
                            "50-configure_sshd_commanduser": 
                            {
                                "command": "sed -i 's:#AuthorizedKeysCommandUser nobody:AuthorizedKeysCommandUser nobody:g' /etc/ssh/sshd_config"
                            },
                            "60-create_groupnamefile": 
                            {
                                "command": 
                                { "Fn::Join" : [ "", [ 
                                        "echo ", 
                                        { "Ref" : "IAMGroup" },
                                        " > /usr/local/bin/groupname\n" 
                                ]]}
                            }
                        }
                    },
                    "install-updates" :
                    {
                        "commands" :
                        {
                            "10-install-updates" :
                            {
                                "command" : "yum -y update"
                            }
                        }
                    },
                    "systemprep-launch" :
                    {
                        "commands" :
                        {
                            "10-systemprep-launch" :
                            {
                                "command" :
                                { "Fn::Join" : [ "", [
                                    "bash /etc/cfn/scripts/systemprep-bootstrapper.sh",
                                    " --noreboot",
                                    " --environment ",
                                    { "Ref" : "SystemPrepEnvironment" },
                                    {
                                        "Fn::If" :
                                        [
                                            "UseOuPath",
                                            { "Fn::Join" : [ "", [
                                                " --oupath \"",
                                                { "Ref" : "SystemPrepOuPath" },
                                                "\""
                                            ]]},
                                            ""
                                        ]
                                    }
                                ]]}
                            }
                        }
                    },
                    "systemprep-update" :
                    {
                        "commands" :
                        {
                            "10-systemprep-update" :
                            {
                                "command" :
                                { "Fn::Join" : [ "", [
                                    "bash /etc/cfn/scripts/systemprep-bootstrapper.sh",
                                    " --saltstates None",
                                    " --noreboot",
                                    " --environment ",
                                    { "Ref" : "SystemPrepEnvironment" },
                                    {
                                        "Fn::If" :
                                        [
                                            "UseOuPath",
                                            { "Fn::Join" : [ "", [
                                                " --oupath \"",
                                                { "Ref" : "SystemPrepOuPath" },
                                                "\""
                                            ]]},
                                            ""
                                        ]
                                    }
                                ]]}
                            }
                        }
                    },
                    "make-app" :
                    {
                        "files" :
                        {
                            "/etc/cfn/scripts/make-app" :
                            {
                                "source" : { "Ref" : "AppScriptUrl" },
                                "mode" : "000700",
                                "owner" : "root",
                                "group" : "root"
                            }
                        },
                        "commands" :
                        {
                            "10-make-app" :
                            {
                                "command" :
                                { "Fn::Join" : [ "", [
                                    { "Ref" : "AppScriptShell" },
                                    " /etc/cfn/scripts/make-app ",
                                    { "Ref" : "AppScriptParams" }
                                ]]}
                            }
                        }
                    },
                    "finalize" :
                    {
                        "commands" :
                        {
                            "10-signal-success" :
                            {
                                "command" :
                                { "Fn::Join" : [ "", [
                                    "/opt/aws/bin/cfn-signal -e 0",
                                    " --stack ", { "Ref" : "AWS::StackName" },
                                    " --resource SystemPrepAutoScalingGroup",
                                    " --region ", { "Ref" : "AWS::Region"}, "\n"
                                ]]},
                                "ignoreErrors" : "true"
                            }
                        }
                    },
                    "reboot" :
                    {
                        "commands" :
                        {
                            "10-reboot" :
                            {
                                "command" : "shutdown -r +1 &"
                            }
                        }
                    }
                }
            },
            "Properties" :
            {
                "ImageId" : { "Ref" : "AmiId" },
                "InstanceType" : { "Ref" : "InstanceType" },
                "AssociatePublicIpAddress" :
                {
                    "Fn::If" :
                    [
                        "AssignPublicIp",
                        "true",
                        "false"
                    ]
                },
                "BlockDeviceMappings" :
                [
                    {
                        "DeviceName" :
                        { "Fn::Join" : [ "", [
                            "/dev/",
                            { "Fn::FindInMap" :
                                [
                                    "Distro2RootDevice",
                                    { "Ref" : "AmiDistro" },
                                    "DeviceName"
                                ]
                            }
                        ]]},
                        "Ebs" :
                        {
                            "VolumeType" : "gp2",
                            "DeleteOnTermination" : "true"
                        }
                    }
                ],
                "KeyName" :
                {
                    "Ref" : "KeyPairName"
                },
                "SecurityGroups" :
                {
                    "Ref" : "SecurityGroupIds"
                },
                "IamInstanceProfile" : 
                {
                    "Ref": "InstanceProfile"
                },
                "UserData" :
                {
                    "Fn::Base64" :
                    { "Fn::Join" : [ "", [
                        "#!/bin/bash -xe\n\n",

                        "# CFN LaunchConfig Update Toggle: ",
                        { "Ref" : "ToggleNewInstances" },
                        "\n\n",

                        "# Get pip\n",
                        "curl --silent --show-error --retry 5 -L ",
                        "https://bootstrap.pypa.io/get-pip.py",
                        " | python", "\n\n",

                        "# Add pip to path\n",
                        "hash pip 2> /dev/null || ",
                        "PATH=\"${PATH}:/usr/local/bin\"", "\n\n",

                        "# Upgrade setuptools\n",
                        "pip install --upgrade setuptools\n\n",

                        "# Fix python urllib3 warnings\n",
                        "yum -y install gcc python-devel libffi-devel openssl-devel\n",
                        "pip install pyopenssl ndg-httpsclient pyasn1\n\n",

                        "# Get cfn utils\n",
                        "pip install https://s3.amazonaws.com/cloudformation-examples/aws-cfn-bootstrap-latest.tar.gz\n\n",

                        "# Remove gcc now that it is no longer needed\n",
                        "yum -y remove gcc --setopt=clean_requirements_on_remove=1\n\n",

                        "# Fixup cfn utils\n",
                        "INITDIR=$(find -L /opt/aws/apitools/cfn-init/init -name redhat ",
                        "2> /dev/null || echo /usr/init/redhat)\n",
                        "chmod 775 ${INITDIR}/cfn-hup\n",
                        "ln -f -s ${INITDIR}/cfn-hup /etc/rc.d/init.d/cfn-hup\n",
                        "chkconfig --add cfn-hup\n",
                        "chkconfig cfn-hup on\n",
                        "mkdir -p /opt/aws/bin\n",
                        "BINDIR=$(find -L /opt/aws/apitools/cfn-init -name bin ",
                        "2> /dev/null || echo /usr/bin)\n",
                        "for SCRIPT in cfn-elect-cmd-leader cfn-get-metadata cfn-hup ",
                        "cfn-init cfn-send-cmd-event cfn-send-cmd-result cfn-signal\n",
                        "do\n",
                        "    ln -s ${BINDIR}/${SCRIPT} /opt/aws/bin/${SCRIPT} 2> /dev/null || ",
                        "    echo Skipped symbolic link, /opt/aws/bin/${SCRIPT} already exists\n",
                        "done\n\n",

                        "# Add cfn-signal to path\n",
                        "hash cfn-signal 2> /dev/null || ",
                        "PATH=\"${PATH}:/usr/local/bin:/opt/aws/bin\"",
                        "\n\n",

                        "# Execute cfn-init\n",
                        "/opt/aws/bin/cfn-init -v -c launch",
                        " --stack ", { "Ref" : "AWS::StackName" },
                        " --resource SystemPrepLaunchConfig",
                        " --region ", { "Ref" : "AWS::Region" }, " ||",
                        " ( echo 'ERROR: cfn-init failed! Aborting!';",
                        " /opt/aws/bin/cfn-signal -e 1",
                        "  --stack ", { "Ref" : "AWS::StackName" },
                        "  --resource SystemPrepAutoScalingGroup",
                        "  --region ", { "Ref" : "AWS::Region"}, ";",
                        " exit 1",
                        " )\n\n"
                    ] ] }
                }
            }
        }
    }
}